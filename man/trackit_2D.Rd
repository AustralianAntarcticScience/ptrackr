% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trackit_2D.R
\name{trackit_2D}
\alias{trackit_2D}
\title{Trackit 2D}
\usage{
trackit_2D(pts, romsobject, w_sink = 100, time = 50,
  sedimentation = FALSE, particle_radius = 0.00016,
  force_final_settling = FALSE, romsparams = NULL,
  sedimentationparams = NULL, loop_trackit = FALSE,
  time_steps_in_s = 1800, uphill_restricted = NULL)
}
\arguments{
\item{pts}{input points}

\item{w_sink}{sinking rate in m/days}

\item{time}{total number of days to run the model}

\item{sedimentation}{defines stopping conditions for the particles. If TRUE, particles stop depending on their size and on the current speed and number of particles in a cell}

\item{particle_radius}{particle radius for the sedimentation, default is set to 0.16mm}

\item{force_final_settling}{This can be set to TRUE to force all floating particles at the end of the model-run to settle. This is useful because otherwise a stopindex for those points is not defined}

\item{romsparams}{parameters that are filled when this function is called from loopit}

\item{sedimentationparams}{parameters estimated through the buildparams-function}

\item{uphill_restricted}{define whether particles are restricted from moving uphill, defined as from how many meters difference particles cannot cross between cells}

\item{kdtree}{kd tree}
}
\value{
list(ptrack = ptrack, pnow = pnow, plast = plast, stopindex = stopindex, indices = indices, indices_2D = indices_2D)
}
\description{
Function to track particles through a ROMS-field in 2D-space.
}
\details{
Due to the limitation of RAM available, time is restricted depending on the number of particles
(too long runs might give an error because the generated vector is too large)
If sedimentation=TRUE, then particles stop in areas with low current speed. default is FALSE
}
\examples{
data(surface_chl)
data(toyROMS)
pts_seeded <- create_points_pattern(surface_chl, multi=100)
track <- trackit_2D(pts = pts_seeded, romsobject = toyROMS, force_final_settling=TRUE)

## where points end up
plot(track$pnow, col="red", cex=0.1)
points(pts_seeded, cex=0.1)

## where points stop
pend <- data.frame(matrix(NA, ncol=2, nrow=nrow(pts_seeded)))
for(irow in 1:nrow(pts_seeded)){
  pend[irow,] <- track$ptrack[irow,1:2,track$stopindex]
}
plot(pend, col="red", cex=0.6)
points(pts_seeded)

## with stronger currents:
toyROMS2 <- toyROMS
toyROMS2$i_u <- toyROMS$i_u*5
toyROMS2$i_v <- toyROMS$i_v*5
track <- trackit_2D(pts = pts_seeded, romsobject = toyROMS2)
plot(pts_seeded)
points(track$pnow, col="red", cex=0.6)







## looking at the results together with roms:
library(rasterVis)
library(rgdal)
library(rgl)

ra <- raster(nrow = 50, ncol = 50, ext = extent(surface_chl))
r_roms <- rasterize(x = cbind(as.vector(toyROMS$lon_u), as.vector(toyROMS$lat_u)), y = ra, field = as.vector(-toyROMS$h))
plot(r_roms)

## what the floor-current-speed looks like
ra <- raster(nrow = 50, ncol = 50, ext = extent(surface_chl))
i_uv_roms <- rasterize(x = cbind(as.vector(toyROMS$lon_u), as.vector(toyROMS$lat_u)), y = ra, field = sqrt(as.vector(toyROMS$i_u)^2 + as.vector(toyROMS$i_v)^2))
plot(i_uv_roms)
}

