% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trackit_3D.R
\name{trackit_3D}
\alias{trackit_3D}
\title{Trackit 3D}
\usage{
trackit_3D(pts, romsobject, w_sink = 100, time = 50, romsparams,
  loop_trackit = FALSE, time_steps_in_s = 1800)
}
\arguments{
\item{pts}{input points}

\item{w_sink}{sinking rate m/days}

\item{time}{total number of days to run the model}

\item{loop_trackit}{Default is FALSE, automatically turns TRUE when called from loopit_2D3D}

\item{kdtree}{kd tree}
}
\value{
list(ptrack = ptrack, pnow = pnow, plast = plast, stopindex = stopindex, indices = indices, indices_2D = indices_2D)
}
\description{
Function to track particles through a ROMS-field.
}
\details{
the function needs an input for speed of the sinking particles (w_sink) and for time
due to the limitation of RAM available, time is restricted depending on the number of particles
(too long runs might give an error because the generated vector is too large)
I found half days work great
}
\examples{
data(surface_chl)
data(toyROMS)
pts <- create_points_pattern(surface_chl, multi=100)
track <- trackit_3D(pts = pts, romsobject = toyROMS)

## checking the results
plot(pts)
points(track$pnow, col = "red")

# library(rgl)
# plot3d(pts, zlim = c(-1500,1))
# plot3d(track$pnow, col = "red", add = TRUE)

## better:
library(rasterVis)
library(rgdal)

ra <- raster(nrow = 50, ncol = 50, ext = extent(surface_chl))
r_roms <- rasterize(x = cbind(as.vector(toyROMS$lon_u), as.vector(toyROMS$lat_u)), y = ra, field = as.vector(-toyROMS$h))
pr <- projectRaster(r_roms, crs = "+proj=laea +lon_0=137 +lat_0=-66")  #get the right projection (through the centre)

plot3D(pr, adjust = FALSE, zfac = 50)                    # plot bathymetry with 50x exaggerated depth
points <- matrix(NA, ncol=3, nrow=dim(track$ptrack)[1])  # get Tracking-points
for(i in seq_len(dim(track$ptrack)[1])){
  points[i,] <- track$ptrack[i,,track$stopindex[i]] 
}
pointsxy <- project(as.matrix(points[,1:2]), projection(pr))  #projection on Tracking-points
points3d(pointsxy[,1], pointsxy[,2], points[,3]*50)

ptsxy <- project(as.matrix(pts[,1:2]), projection(pr))  #projection on Tracking-points
points3d(ptsxy[,1], ptsxy[,2], pts[,3]*50, col = "red")
}

