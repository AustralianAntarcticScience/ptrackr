% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loopit_2D3D.R
\name{loopit_2D3D}
\alias{loopit_2D3D}
\title{Loopit 2D/3D}
\usage{
loopit_2D3D(pts_seeded, romsobject, roms_slices = 1, start_slice = 1,
  domain = "2D", trajectories = FALSE, speed, runtime = 10,
  looping_time = 0.25, sedimentation = FALSE, particle_radius = 0.00016)
}
\arguments{
\item{pts_seeded}{matrix of particles with 3 colums (lon, lat, depth)}

\item{romsobject}{list of matrices containing ROMS-model cell-values (lon_u, lat_u, h, i_u, i_v, i_w)}

\item{roms_slices}{number of time-frames to use in the particle-tracking}

\item{start_slice}{determines which roms_slice the particle-tracking starts with}

\item{domain}{either 2D or 3D}

\item{trajectories}{TRUE/FALSE statement to define whether to store particle trajectories (model runs much faster without storing trajectories). Default is FALSE.}

\item{speed}{(w_sink) sinking rate m/days}

\item{runtime}{(time) total number fo days to run the model}

\item{looping_time}{default at 0.25 which is equal to the 6h intervall of the ROMS-model}

\item{sedimentation}{TRUE/FALSE with default as FALSE, should particles settle on the seafloor depending on current speed and particle density (McCave & Swift 1976)}

\item{particle_radius}{radius of the particles, this influences the sedimentation rate with smaller values meaning less sedimentation}
}
\value{
list(pts=pts, pend=pend, stopindex=obj$stopindex, ptrack=obj$ptrack, lon_list=lon_list, idx_list=idx_list, idx_list_2D=idx_list_2D, id_list=id_list)
}
\description{
WORKING FINE FOR BOTH 2D AND 3D
}
\details{
Function to run the functions loopit_trackit_2D/loopit_trackit_3D to follow particles through different consecutive ROMS-sclices. Looping can also increase performance when using very large number of particles by looping through shorter time steps.
Loops are set to run in half day intervals. If no runtime is defined, the function will loop depending on the depth of the deepest cell and the sinking speed to allow each particle to possibly sink to the seafloor (2*max(h)/speed)
}
\examples{
data(surface_chl)
data(toyROMS)

########## 3D-tracking:
pts_seeded <- create_points_pattern(surface_chl, multi=100)
run <- loopit_2D3D(pts_seeded = pts_seeded, romsobject = toyROMS, roms_slices = 4, speed = 100, runtime = 50, domain = "3D", trajectories = TRUE)

## testing the output
library(rasterVis)
library(rgdal)
library(rgl)
ra <- raster(nrow=50,ncol=50,ext=extent(surface_chl))
r_roms <- rasterize(x = cbind(as.vector(toyROMS$lon_u), as.vector(toyROMS$lat_u)), y= ra, field = as.vector(-toyROMS$h))
pr <- projectRaster(r_roms, crs = "+proj=laea +lon_0=137 +lat_0=-66")  #get the right projection (through the centre)

plot3D(pr, adjust = FALSE, zfac = 50)                    # plot bathymetry with 50x exaggerated depth
pointsxy <- project(as.matrix(run$pend[,1:2]), projection(pr))  #projection on Tracking-points
points3d(pointsxy[,1],pointsxy[,2],run$pend[,3]*50)#,xlim=xlim,ylim=ylim)


########## 2D-tracking:
pts_seeded <- create_points_pattern(surface_chl, multi=100)
run <- loopit_2D3D(pts_seeded = pts_seeded, roms_slices = 4, romsobject = toyROMS, speed = 100, runtime = 50, sedimentation = TRUE)

plot(pts_seeded)
points(run$pend, col="red", cex=0.6)
points(run$pts , col="blue", cex=0.6)

 
########## 2D-tracking with storing trajectories:
pts_seeded <- create_points_pattern(surface_chl, multi=100)
run <- loopit_2D3D(pts_seeded = pts_seeded, roms_slices = 4, particle_radius = 0.00001, romsobject = toyROMS, speed = 100, runtime = 50, sedimentation = TRUE, trajectories = TRUE)

plot(pts_seeded)
points(run$pend, col="red", cex=0.6)
points(run$pts , col="blue", cex=0.6)

## looking at the horizontal flux: this should be abother function to handle the output
ra <- raster(nrow=50,ncol=50,ext=extent(surface_chl))
mat_list <- list()
for(islices in 1:length(run$idx_list_2D)){
  mat_list[[islices]] <- matrix(unlist(run$idx_list_2D[[islices]]),ncol=12)
}
testmatrix <- do.call(rbind, mat_list)
testid <- unlist(run$id_list)
flux_list <- split(testmatrix,testid)
for(k in 1:length(flux_list)){
  ## cells visited by a particle ("presence-only")
  flux_list[[k]] <- unique(flux_list[[k]])
  ## drop first and last value (input and setting cell)
  flux_list[[k]] <- flux_list[[k]][-c(1,length(flux_list[[k]]))]
} 
flux <- as.vector(unlist(flux_list))

library(ggplot2)
xlim <- c(xmin(ra),xmax(ra))
ylim <- c(ymin(ra),ymax(ra))
df <- data.frame(cbind(toyROMS$lon_u[flux],toyROMS$lat_u[flux]))
p1 <- ggplot(df,aes(x=df[,1],y=df[,2])) + 
  ggtitle("particle distribution") +
 geom_bin2d(binwidth = c(xres(ra),yres(ra))) + 
 scale_x_continuous(limits = xlim) +
 scale_y_continuous(limits = ylim)
p1_props <- ggplot_build(p1)$data[[1]]
p1_props$x<-with(p1_props,(xmin+xmax)/2)
p1_props$y<-with(p1_props,(ymin+ymax)/2)
FluxCts  <- p1_props[,c(5,6,4)]
m2_FluxCts <- na.omit(FluxCts)
flux_ra <- rasterize(m2_FluxCts[,1:2],ra, field=m2_FluxCts[,3])
plot(flux_ra)
}

